/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaBasica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[5,19],$V2=[1,41],$V3=[1,48],$V4=[1,49],$V5=[1,50],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[15,16,17,18,24,40,41,42,45,48,52,53,54,55,56,58,60,61,65,66,67,68,69,70],$Vo=[1,75],$Vp=[1,63],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,77],$Vx=[12,14,21,27,44,64,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91],$Vy=[2,99],$Vz=[1,97],$VA=[1,98],$VB=[1,99],$VC=[1,100],$VD=[1,101],$VE=[12,14,21,27,71,72,73,74,75],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[12,14,21,27,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91],$VM=[21,27],$VN=[12,14,27],$VO=[1,131],$VP=[14,21],$VQ=[15,20,65,66,67,87,92,93,94,95,96],$VR=[12,14,21,27,71,72,73,74,75,80,81,82,83,84,85,86,87],$VS=[12,14,21,27,71,74],$VT=[12,14,21,27,71,73,74,75],$VU=[12,14,21,27,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89],$VV=[1,214],$VW=[24,52,53];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LCUERPOGEN":4,"EOF":5,"CUERPOGEN":6,"PRINCIPAL":7,"DECVAR":8,"TIPO":9,"LVARIABLES":10,"ASIG":11,":":12,"VALOR":13,",":14,"id":15,"num":16,"str":17,"bool":18,"principal":19,"(":20,")":21,"{":22,"LCUERPO":23,"}":24,"CUERPO":25,"ASIGNACION":26,";":27,"SI":28,"SELECCION":29,"MIENTRAS":30,"HACER":31,"REPETIR":32,"PARA":33,"LOOP":34,"CONTAR":35,"HACERX":36,"LLAMADO":37,"ESTANDARVALOR":38,"ESTANDARVOID":39,"continue":40,"break":41,"return":42,"LID":43,"=":44,"if":45,"ELSE":46,"else":47,"switch":48,"LCASOS":49,"DEFECTO":50,"CASO":51,"case":52,"default":53,"while":54,"do":55,"repeat":56,"until":57,"for":58,"ASIGPARA":59,"loop":60,"count":61,"whilex":62,"LVALOR":63,".":64,"getBool":65,"getLength":66,"inNum":67,"outStr":68,"outNum":69,"inStr":70,"||":71,"|&":72,"&&":73,"|?":74,"&?":75,"!":76,"REL":77,"E":78,"OPREL":79,"<":80,">":81,"<=":82,">=":83,"==":84,"!=":85,"+":86,"-":87,"*":88,"/":89,"%":90,"^":91,"numero":92,"cadena":93,"true":94,"false":95,"NULL":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:":",14:",",15:"id",16:"num",17:"str",18:"bool",19:"principal",20:"(",21:")",22:"{",24:"}",27:";",40:"continue",41:"break",42:"return",44:"=",45:"if",47:"else",48:"switch",52:"case",53:"default",54:"while",55:"do",56:"repeat",57:"until",58:"for",60:"loop",61:"count",62:"whilex",64:".",65:"getBool",66:"getLength",67:"inNum",68:"outStr",69:"outNum",70:"inStr",71:"||",72:"|&",73:"&&",74:"|?",75:"&?",76:"!",80:"<",81:">",82:"<=",83:">=",84:"==",85:"!=",86:"+",87:"-",88:"*",89:"/",90:"%",91:"^",92:"numero",93:"cadena",94:"true",95:"false",96:"NULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[8,3],[11,2],[11,0],[10,3],[10,1],[9,1],[9,1],[9,1],[7,6],[7,5],[23,2],[23,1],[25,2],[25,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,2],[25,2],[25,2],[25,2],[25,2],[25,3],[25,3],[25,2],[26,3],[26,2],[28,8],[46,4],[46,0],[29,10],[49,2],[49,1],[51,4],[50,3],[50,0],[30,7],[31,8],[32,8],[33,11],[59,1],[59,4],[34,5],[35,7],[36,10],[37,4],[37,6],[63,3],[63,1],[63,0],[38,4],[38,4],[38,6],[39,4],[39,6],[39,6],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,1],[77,3],[77,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,2],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,3],[43,3],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 15: case 42:

                        $$[$0-1].hijos.push($$[$0]);
                        this.$ = $$[$0-1];
                    
break;
case 3:
 this.$ = {nombre : "LCUERPOGEN", hijos:[$$[$0]]}; 
break;
case 4: case 6: case 10: case 11: case 12: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 51: case 73: case 75: case 94: case 95: case 96:
 this.$ = $$[$0]; 
break;
case 5:

                        this.$ = {
                            nombre : "DECVAR",
                            tipo : $$[$0-2],
                            hijos : [$$[$0-1], $$[$0]]
                        };
                    
break;
case 7:
 this.$ = {nombre : "NULL", valor : "NULL"}; 
break;
case 8:

                        var lid = {nombre : "LID", hijos:[$$[$0]]};
                        $$[$0-2].hijos.push(lid);
                        this.$ = $$[$0-2];
                    
break;
case 9:

                      var lid = {nombre : "LID", hijos:[$$[$0]]};
                      this.$ = {nombre : "LVARIABLES", hijos:[lid]};
                    
break;
case 13:
 this.$ = {nombre : "PRINCIPAL", hijos : [$$[$0-1]]}; 
break;
case 14:
 this.$ = {nombre : "PRINCIPAL", hijos : [{nombre : "LCUERPO", hijos:[]}]}; 
break;
case 16:
 this.$ = {nombre : "LCUERPO", hijos:[$$[$0]]}; 
break;
case 17: case 18: case 28: case 29: case 30: case 39: case 97:
 this.$ = $$[$0-1]; 
break;
case 31:
 this.$ = { nombre : "CONTINUE"}; 
break;
case 32:
 this.$ = { nombre : "BREAK", hijos : []}; 
break;
case 33:
 this.$ = { nombre : "BREAK", hijos : [$$[$0-1]]}; 
break;
case 34:
 this.$ = { nombre : "RETURN", hijos : [$$[$0-1]]}; 
break;
case 35:
 this.$ = { nombre : "RETURN", hijos : []}; 
break;
case 36:

                        this.$ = {
                            nombre : "ASIGNACION",
                            hijos : [$$[$0-2], $$[$0]]
                        };
                    
break;
case 38:

                        this.$ = {
                            nombre : "SI",
                            hijos : [$$[$0-5], $$[$0-2]]
                        };
                        if($$[$0] !== null)
                            this.$.hijos.push($$[$0]);
                    
break;
case 40: case 46:
 this.$ = null; 
break;
case 41:

                        this.$ = {
                            nombre : "SELECCION",
                            hijos : [$$[$0-7], $$[$0-5], $$[$0-2]]
                        };
                        if($$[$0-1] !== null)
                            this.$.hijos.push($$[$0-1]);
                    
break;
case 43:

                        this.$ = {
                            nombre : "LCASOS",
                            hijos : [$$[$0]]
                        };
                    
break;
case 44:
 this.$ = { nombre : "CASO", hijos : [$$[$0-2], $$[$0]]}; 
break;
case 45:
 this.$ = {nombre : "DEFECTO", hijos : [$$[$0]]}; 
break;
case 47:

                        this.$ = {
                            nombre : "MIENTRAS",
                            hijos : [$$[$0-4], $$[$0-1]]
                        };
                    
break;
case 48:

                        this.$ = {
                            nombre : "HACER",
                            hijos : [$$[$0-5], $$[$0-1]]
                        };
                    
break;
case 49:

                        this.$ = {
                            nombre : "REPETIR",
                            hijos : [$$[$0-5], $$[$0-1]]
                        };
                    
break;
case 50:

                        this.$ = {
                            nombre : "PARA",
                            hijos : [$$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]]
                        };
                    
break;
case 52:

                        var lid = {nombre : "LID", hijos:[$$[$0-2]]};
                        var lvariables = {nombre : "LVARIABLES", hijos:[lid]};
                        this.$ = {
                            nombre : "DECVAR",
                            tipo : $$[$0-3],
                            hijos : [lvariables, $$[$0]]
                        };
                    
break;
case 53:

                        this.$ = {
                            nombre : "LOOP",
                            id : $$[$0-3],
                            hijos : [$$[$0-1]]
                        };
                    
break;
case 54:

                        this.$ = {
                            nombre : "CONTAR",
                            hijos : [$$[$0-4], $$[$0-1]]
                        };
                    
break;
case 55:

                        this.$ = {
                            nombre : "HACERX",
                            hijos : [$$[$0-7], $$[$0-3], $$[$0-1]]
                        };
                    
break;
case 56:

                        this.$ = {
                            nombre : "LLAMADO",
                            hijos : [$$[$0-3], $$[$0-1]]
                        };
                    
break;
case 57:

                        $$[$0].hijos.unshift({
                            nombre : "LLAMADO",
                            hijos : [$$[$0-5], $$[$0-3]]
                        });
                        this.$ = $$[$0];
                    
break;
case 58: case 98:

                        $$[$0-2].hijos.push($$[$0]);
                        this.$ = $$[$0-2];
                    
break;
case 59:
 this.$ = { nombre : "LVALOR", hijos : [$$[$0]] }; 
break;
case 60:
 this.$ = { nombre : "LVALOR", hijos : []}; 
break;
case 61:
 this.$ = { nombre : "getBool", hijos : [$$[$0-1]] }; 
break;
case 62:
 this.$ = { nombre : "getLength", hijos : [$$[$0-1]] }; 
break;
case 63:
 this.$ = { nombre : "inNum", hijos : [$$[$0-3], $$[$0-1]] }; 
break;
case 64:
 this.$ = { nombre : "outStr", hijos : [$$[$0-1]] }; 
break;
case 65:
 this.$ = { nombre : "outNum", hijos : [$$[$0-3], $$[$0-1]] }; 
break;
case 66:
 this.$ = { nombre : "inStr", hijos : [$$[$0-3], $$[$0-1]] }; 
break;
case 67: case 68: case 69: case 70: case 71: case 82: case 83: case 84: case 85: case 86: case 87:
 this.$ = {nombre :$$[$0-1], hijos:[$$[$0-2], $$[$0]]}; 
break;
case 72: case 88:
 this.$ = {nombre :$$[$0-1], hijos:[$$[$0]]}; 
break;
case 74:
 this.$ = {nombre : $$[$0-1], hijos:[$$[$0-2], $$[$0]]}; 
break;
case 76:
 this.$ = '<'; 
break;
case 77:
 this.$ = '>'; 
break;
case 78:
 this.$ = '<='; 
break;
case 79:
 this.$ = '>='; 
break;
case 80:
 this.$ = '=='; 
break;
case 81:
 this.$ = '!='; 
break;
case 89:
 this.$ = {nombre : "numero", valor : $$[$0]}; 
break;
case 90:
 this.$ = {nombre : "cadena", valor : $$[$0]}; 
break;
case 91: case 92:
 this.$ = {nombre : "bool", valor : $$[$0]}; 
break;
case 93:
 this.$ = {nombre : "NULL", valor : $$[$0]}; 
break;
case 99:
 this.$ = {nombre : "LID", hijos:[$$[$0]]}; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,19:$V0},{1:[3]},{5:[1,6],6:7,7:4,19:$V0},o($V1,[2,3]),o($V1,[2,4]),{20:[1,8]},{1:[2,1]},o($V1,[2,2]),{21:[1,9]},{22:[1,10]},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:11,24:[1,12],25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,51],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($V1,[2,14]),o($Vn,[2,16]),{27:[1,53]},{27:[1,54]},o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27]),{27:[1,55]},{27:[1,56]},{27:[1,57]},{27:[1,58]},{15:[1,60],27:[1,59]},{13:61,15:$V2,20:$Vo,27:[1,62],37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{44:[1,76],64:$Vw},{10:78,15:[1,79]},{20:[1,80]},{20:[1,81]},{20:[1,82]},{22:[1,83]},{22:[1,84]},{20:[1,85]},{15:[1,86]},{20:[1,87]},o($Vx,$Vy,{20:[1,88]}),{20:[1,89]},{20:[1,90]},{20:[1,91]},{20:[1,92]},{20:[1,93]},{20:[1,94]},{15:[2,10]},{15:[2,11]},{15:[2,12]},o($V1,[2,13]),o($Vn,[2,15]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,28]),o($Vn,[2,29]),o($Vn,[2,30]),o($Vn,[2,31]),o($Vn,[2,32]),{27:[1,95]},{27:[1,96],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($Vn,[2,35]),{13:102,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($VE,[2,73]),o($VE,[2,75],{79:103,80:[1,110],81:[1,111],82:[1,112],83:[1,113],84:[1,114],85:[1,115],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK}),{15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,78:116,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($VL,[2,89]),o($VL,[2,90]),o($VL,[2,91]),o($VL,[2,92]),o($VL,[2,93]),o($VL,[2,94]),o($VL,[2,95],{64:$Vw}),o($VL,[2,96]),{13:117,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($VM,[2,37],{77:64,78:65,38:72,43:73,37:74,13:118,15:$V2,20:$Vo,65:$Vh,66:$Vi,67:$Vj,76:$Vp,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv}),{15:[1,119]},{11:120,12:[1,122],14:[1,121],27:[2,7]},o($VN,[2,9]),{13:123,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:124,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:125,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:126,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:127,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{15:$VO,16:[1,130],26:129,43:31,59:128},{22:[1,132]},{13:133,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($VP,[2,60],{77:64,78:65,38:72,43:73,37:74,63:134,13:135,15:$V2,20:$Vo,65:$Vh,66:$Vi,67:$Vj,76:$Vp,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv}),{13:136,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:137,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:138,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:139,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:140,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{15:$VO,43:141},o($Vn,[2,33]),o($Vn,[2,34]),{13:142,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:143,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:144,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:145,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:146,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($VE,[2,72]),{15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,78:147,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,78:148,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,78:149,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,78:150,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,78:151,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,78:152,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,78:153,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($VQ,[2,76]),o($VQ,[2,77]),o($VQ,[2,78]),o($VQ,[2,79]),o($VQ,[2,80]),o($VQ,[2,81]),o($VR,[2,88],{88:$VH,89:$VI,90:$VJ,91:$VK}),{21:[1,154],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($VM,[2,36],{71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($Vx,[2,98]),{27:[2,5]},{15:[1,155]},{13:156,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{21:[1,157],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{14:[1,158],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{21:[1,159],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,160],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,161],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{27:[1,162]},{27:[2,51]},{15:[1,163]},o($Vx,$Vy),{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:164,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{21:[1,165],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{14:[1,167],21:[1,166]},o($VP,[2,59],{71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),{21:[1,168],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{21:[1,169],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{14:[1,170],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{21:[1,171],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{14:[1,172],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{14:[1,173],64:$Vw},o($VS,[2,67],{72:$VA,73:$VB,75:$VD}),o($VE,[2,68]),o($VT,[2,69],{72:$VA}),o($VS,[2,70],{72:$VA,73:$VB,75:$VD}),o($VT,[2,71],{72:$VA}),o($VE,[2,74],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK}),o($VR,[2,82],{88:$VH,89:$VI,90:$VJ,91:$VK}),o($VR,[2,83],{88:$VH,89:$VI,90:$VJ,91:$VK}),o($VU,[2,84],{90:$VJ,91:$VK}),o($VU,[2,85],{90:$VJ,91:$VK}),o([12,14,21,27,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,91],[2,86],{90:$VJ}),o($VU,[2,87],{90:$VJ,91:$VK}),o($VL,[2,97]),o($VN,[2,8]),{27:[2,6],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{22:[1,174]},{13:175,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{22:[1,176]},{54:[1,177],62:[1,178]},{57:[1,179]},{13:180,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{12:[1,181]},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,182],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{22:[1,183]},o($VL,[2,56],{64:[1,184]}),{13:185,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($VL,[2,61]),o($VL,[2,62]),{13:186,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{27:[2,64]},{13:187,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:188,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:189,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{21:[1,190],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:191,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{20:[1,192]},{20:[1,193]},{20:[1,194]},{27:[1,195],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{13:196,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($Vn,[2,53]),{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:197,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{15:$VO,43:198},o($VP,[2,58],{71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),{21:[1,199],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{21:[1,200],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{21:[1,201],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,202],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{22:[1,203]},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,204],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{13:205,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:206,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{13:207,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},{15:$VO,26:208,43:31},{27:[2,52],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,209],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VL,[2,57],{64:$Vw}),o($VL,[2,63]),{27:[2,65]},{27:[2,66]},o($Vn,[2,40],{46:210,47:[1,211]}),{49:212,51:213,52:$VV},o($Vn,[2,47]),{21:[1,215],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{14:[1,216],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{21:[1,217],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{21:[1,218]},o($Vn,[2,54]),o($Vn,[2,38]),{22:[1,219]},{24:[2,46],50:220,51:221,52:$VV,53:[1,222]},o($VW,[2,43]),{13:223,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($Vn,[2,48]),{13:224,15:$V2,20:$Vo,37:74,38:72,43:73,65:$Vh,66:$Vi,67:$Vj,76:$Vp,77:64,78:65,87:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv},o($Vn,[2,49]),{22:[1,225]},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:226,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{24:[1,227]},o($VW,[2,42]),{12:[1,228]},{12:[1,229],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{21:[1,230],71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:231,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,232],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Vn,[2,41]),{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:233,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,23:234,25:13,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Vn,[2,55]),{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[1,235],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Vn,[2,39]),{8:15,9:32,15:$V2,16:$V3,17:$V4,18:$V5,24:[2,45],25:52,26:14,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:$V6,41:$V7,42:$V8,43:31,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VW,[2,44],{26:14,8:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,43:31,9:32,25:52,15:$V2,16:$V3,17:$V4,18:$V5,40:$V6,41:$V7,42:$V8,45:$V9,48:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm}),o($Vn,[2,50])],
defaultActions: {6:[2,1],48:[2,10],49:[2,11],50:[2,12],120:[2,5],129:[2,51],171:[2,64],200:[2,65],201:[2,66]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:/* skip comment */
break;
case 4:/* skip comment */
break;
case 5:return 92
break;
case 6:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93;
break;
case 7:return 88
break;
case 8:return 89
break;
case 9:return 87
break;
case 10:return 86
break;
case 11:return 91
break;
case 12:return 90
break;
case 13:return 82
break;
case 14:return 83
break;
case 15:return 80
break;
case 16:return 81
break;
case 17:return 84
break;
case 18:return 85
break;
case 19:return 73
break;
case 20:return 71
break;
case 21:return 74
break;
case 22:return 75
break;
case 23:return 72
break;
case 24:return 76
break;
case 25:return 20
break;
case 26:return 21
break;
case 27:return 22
break;
case 28:return 24
break;
case 29:return '['
break;
case 30:return ']'
break;
case 31:return 12
break;
case 32:return 27
break;
case 33:return '..'
break;
case 34:return 64
break;
case 35:return 14
break;
case 36:return 44
break;
case 37:return 16
break;
case 38:return 17
break;
case 39:return 18
break;
case 40:return 'void'
break;
case 41:return 'array'
break;
case 42:return 94
break;
case 43:return 95
break;
case 44:return 'of'
break;
case 45:return 'element'
break;
case 46:return 96
break;
case 47:return 'create'
break;
case 48:return 45
break;
case 49:return 'then'
break;
case 50:return 47
break;
case 51:return 48
break;
case 52:return 52
break;
case 53:return 53
break;
case 54:return 41
break;
case 55:return 40
break;
case 56:return 42
break;
case 57:return 54
break;
case 58:return 55
break;
case 59:return 56
break;
case 60:return 57
break;
case 61:return 58
break;
case 62:return 60
break;
case 63:return 61
break;
case 64:return 62
break;
case 65:return 19
break;
case 66:return 65
break;
case 67:return 'getNum'
break;
case 68:return 68
break;
case 69:return 69
break;
case 70:return 70
break;
case 71:return 67
break;
case 72:return 'show'
break;
case 73:return 'getRandom'
break;
case 74:return 66
break;
case 75:return 'NullPointerException'
break;
case 76:return 'MissingReturnStatement'
break;
case 77:return 'ArithmeticException'
break;
case 78:return 'StackOverFlowException'
break;
case 79:return 'HeapOverFlowException'
break;
case 80:return 'PoolOverFlowException'
break;
case 81:return 'throws'
break;
case 82:return 15
break;
case 83:return 5
break;
case 84:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\r)/,/^(?:\n)/,/^(?:%%[^\n]*\n)/,/^(?:¿¿[^"??"]*\?\?)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&\?)/,/^(?:\|&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:,)/,/^(?:=)/,/^(?:num\b)/,/^(?:str\b)/,/^(?:bool\b)/,/^(?:void\b)/,/^(?:array\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:of\b)/,/^(?:element\b)/,/^(?:NULL\b)/,/^(?:create\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:Principal\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:outStr\b)/,/^(?:outNum\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:NullPointerException\b)/,/^(?:MissingReturnStatement\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:throws\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaBasica;
exports.Parser = gramaticaBasica.Parser;
exports.parse = function () { return gramaticaBasica.parse.apply(gramaticaBasica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}