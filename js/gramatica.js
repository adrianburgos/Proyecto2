/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,10],$V2=[1,16],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,11],$V7=[5,18,19,35,36,37,38,40],$V8=[15,22],$V9=[1,23],$Va=[2,23],$Vb=[1,26],$Vc=[8,15,18,22],$Vd=[2,30],$Ve=[1,29],$Vf=[8,15,17,18,22,31,56,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98],$Vg=[2,109],$Vh=[8,15,17],$Vi=[1,34],$Vj=[2,18],$Vk=[1,36],$Vl=[1,55],$Vm=[1,46],$Vn=[1,54],$Vo=[1,42],$Vp=[1,45],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[8,15,17,31,78,79,80,81,82],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[8,15,17,31,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98],$VI=[15,17,21,22,31],$VJ=[1,104],$VK=[1,105],$VL=[1,106],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,116],$VU=[18,25,29,94,99,100,101,102,103],$VV=[8,15,17,31,78,79,80,81,82,87,88,89,90,91,92,93,94],$VW=[17,31],$VX=[18,19,34,36,37,38,53,54,55,57,61,65,66,67,68,69,71,73,74],$VY=[1,147],$VZ=[8,15,17,31,78,81],$V_=[8,15,17,31,78,80,81,82],$V$=[8,15,17,31,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96],$V01=[8,31],$V11=[1,225],$V21=[34,65,66];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LCUERPOGEN":4,"EOF":5,"CUERPOGEN":6,"DECVAR":7,";":8,"DECFUN":9,"DECARR":10,"PRINCIPAL":11,"TIPO":12,"LVARIABLES":13,"ASIG":14,":":15,"VALOR":16,",":17,"id":18,"array":19,"LCORCHETES":20,"of":21,"[":22,"RANGO":23,"]":24,"numero":25,"..":26,"TIPOFUN":27,"L":28,"(":29,"LPAR":30,")":31,"{":32,"LCUERPO":33,"}":34,"void":35,"num":36,"str":37,"bool":38,"LID":39,"principal":40,"CUERPO":41,"ASIGNACION":42,"SI":43,"SELECCION":44,"MIENTRAS":45,"HACER":46,"REPETIR":47,"PARA":48,"LOOP":49,"CONTAR":50,"HACERX":51,"LLAMADO":52,"continue":53,"break":54,"return":55,"=":56,"if":57,"then":58,"ELSE":59,"else":60,"switch":61,"LCASOS":62,"DEFECTO":63,"CASO":64,"case":65,"default":66,"while":67,"do":68,"repeat":69,"until":70,"for":71,"ASIGPARA":72,"loop":73,"count":74,"whilex":75,"LVALOR":76,".":77,"||":78,"|&":79,"&&":80,"|?":81,"&?":82,"!":83,"REL":84,"E":85,"OPREL":86,"<":87,">":88,"<=":89,">=":90,"==":91,"!=":92,"+":93,"-":94,"*":95,"/":96,"%":97,"^":98,"cadena":99,"true":100,"false":101,"NULL":102,"create":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",15:":",17:",",18:"id",19:"array",21:"of",22:"[",24:"]",25:"numero",26:"..",29:"(",31:")",32:"{",34:"}",35:"void",36:"num",37:"str",38:"bool",40:"principal",53:"continue",54:"break",55:"return",56:"=",57:"if",58:"then",60:"else",61:"switch",65:"case",66:"default",67:"while",68:"do",69:"repeat",70:"until",71:"for",73:"loop",74:"count",75:"whilex",77:".",78:"||",79:"|&",80:"&&",81:"|?",82:"&?",83:"!",87:"<",88:">",89:"<=",90:">=",91:"==",92:"!=",93:"+",94:"-",95:"*",96:"/",97:"%",98:"^",99:"cadena",100:"true",101:"false",102:"NULL",103:"create"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,2],[6,1],[7,3],[14,2],[14,0],[13,3],[13,1],[10,6],[20,4],[20,3],[23,1],[23,3],[23,0],[9,10],[27,1],[27,1],[28,1],[28,0],[30,5],[30,3],[30,0],[12,1],[12,1],[12,1],[12,1],[11,6],[33,2],[33,1],[41,2],[41,2],[41,2],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,2],[41,2],[41,2],[41,3],[41,3],[41,2],[42,3],[42,2],[43,9],[59,4],[59,0],[44,10],[62,2],[62,1],[64,4],[63,3],[63,0],[45,7],[46,8],[47,8],[48,11],[72,1],[72,4],[49,5],[50,7],[51,10],[52,4],[52,6],[76,3],[76,1],[76,0],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,1],[84,3],[84,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,2],[85,1],[85,1],[85,1],[85,1],[85,1],[85,4],[85,1],[85,1],[85,3],[39,3],[39,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 32: case 58:

                        $$[$0-1].hijos.push($$[$0]);
                        this.$ = $$[$0-1];
                    
break;
case 3:
 this.$ = {nombre : "LCUERPOGEN", hijos:[$$[$0]]}; 
break;
case 4: case 6: case 34: case 35: case 36: case 46: case 55: case 107:
 this.$ = $$[$0-1]; 
break;
case 5: case 7: case 9: case 20: case 21: case 22: case 27: case 28: case 29: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 67: case 83: case 85: case 105: case 106:
 this.$ = $$[$0]; 
break;
case 8:

                        this.$ = {
                            nombre : "DECVAR",
                            tipo : $$[$0-2],
                            hijos : [$$[$0-1], $$[$0]]
                        };
                    
break;
case 10:
 this.$ = {nombre : "NULL", valor : "NULL"}; 
break;
case 11:

                        var lid = {nombre : "LID", hijos:[$$[$0]]};
                        $$[$0-2].hijos.push(lid);
                        this.$ = $$[$0-2];
                    
break;
case 12:

                      var lid = {nombre : "LID", hijos:[$$[$0]]};
                      this.$ = {nombre : "LVARIABLES", hijos:[lid]};
                    
break;
case 13:

                        this.$ = {
                            nombre : "ARRAY",
                            tipo : $$[$0],
                            id : $$[$0-3],
                            hijos : [$$[$0-2]]
                        };
                    
break;
case 14:

                        $$[$0-3].hijos.push($$[$0-1]);
                        this.$ = $$[$0-3];
                    
break;
case 15:
 this.$ = {nombre : "LCORCHETES", hijos : [$$[$0-1]]}; 
break;
case 16:
 this.$ = {nombre : "RANGO", hijos : ["0", $$[$0]]}; 
break;
case 17:
 this.$ = {nombre : "RANGO", hijos : [$$[$0-2], $$[$0]]}; 
break;
case 18:
 this.$ = {nombre : "RANGO", hijos : []}; 
break;
case 19:

                        this.$ = {
                            nombre : "FUNCION",
                            id : $$[$0-6],
                            tipo : $$[$0-9],
                            hijos : [$$[$0-4], $$[$0-1]]
                        };
                        for(var i = 0; i < $$[$0-4].hijos.length; i++)
                        {
                          this.$.id += "-" + $$[$0-4].hijos[i].tipo;
                        }
                        if($$[$0-8] !== null)
                            this.$.hijos.push($$[$0-8]);
                    
break;
case 23: case 56: case 62:
 this.$ = null; 
break;
case 24:

                        var id = { nombre : "ID", tipo : $$[$0-2], valor : $$[$0-1], hijos : [] };
                        if($$[$0] !== null)
                            id.hijos.push($$[$0]);
                        $$[$0-4].hijos.push(id);
                        this.$ = $$[$0-4];
                    
break;
case 25:

                        var id = { nombre : "ID", tipo : $$[$0-2], valor : $$[$0-1], hijos : [] };
                        if($$[$0] !== null)
                            id.hijos.push($$[$0]);
                        this.$ = {
                            nombre : "LPAR",
                            hijos : [id]
                        };
                    
break;
case 26:
 this.$ = {nombre : "LPAR", hijos : []}; 
break;
case 30:

                      if($$[$0].hijos.length >= 2)
                      {//existe un error la variable no fue declarada correctamente
                        var er = {
                          tipo: "Error Semantico",
                          descripcion: "No se puede declarar una variable de tipo [" + $$[$0].hijos.join(".") + "]",
                          fila: 0,
                          columna: 0
                        };
                        agregarError(er);
                      }
                      this.$ = $$[$0].hijos[0];

                    
break;
case 31:
 this.$ = {nombre : "PRINCIPAL", hijos : [$$[$0-1]]}; 
break;
case 33:
 this.$ = {nombre : "LCUERPO", hijos:[$$[$0]]}; 
break;
case 47:
 this.$ = { nombre : "CONTINUE"}; 
break;
case 48:
 this.$ = { nombre : "BREAK", hijos : []}; 
break;
case 49:
 this.$ = { nombre : "BREAK", hijos : [$$[$0-1]]}; 
break;
case 50:
 this.$ = { nombre : "RETURN", hijos : [$$[$0-1]]}; 
break;
case 51:
 this.$ = { nombre : "RETURN", hijos : []}; 
break;
case 52:

                        this.$ = {
                            nombre : "ASIGNACION",
                            hijos : [$$[$0-2], $$[$0]]
                        };
                    
break;
case 54:

                        this.$ = {
                            nombre : "SI",
                            hijos : [$$[$0-6], $$[$0-2]]
                        };
                        if($$[$0] !== null)
                            this.$.hijos.push($$[$0]);
                    
break;
case 57:

                        this.$ = {
                            nombre : "SELECCION",
                            hijos : [$$[$0-7], $$[$0-5], $$[$0-2]]
                        };
                        if($$[$0-1] !== null)
                            this.$.hijos.push($$[$0-1]);
                    
break;
case 59:

                        this.$ = {
                            nombre : "LCASOS",
                            hijos : [$$[$0]]
                        };
                    
break;
case 60:
 this.$ = { nombre : "CASO", hijos : [$$[$0-2], $$[$0]]}; 
break;
case 61:
 this.$ = {nombre : "DEFECTO", hijos : [$$[$0]]}; 
break;
case 63:

                        this.$ = {
                            nombre : "MIENTRAS",
                            hijos : [$$[$0-4], $$[$0-1]]
                        };
                    
break;
case 64:

                        this.$ = {
                            nombre : "HACER",
                            hijos : [$$[$0-5], $$[$0-1]]
                        };
                    
break;
case 65:

                        this.$ = {
                            nombre : "REPETIR",
                            hijos : [$$[$0-5], $$[$0-1]]
                        };
                    
break;
case 66:

                        this.$ = {
                            nombre : "PARA",
                            hijos : [$$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]]
                        };
                    
break;
case 68:

                        var lid = {nombre : "LID", hijos:[$$[$0-2]]};
                        var lvariables = {nombre : "LVARIABLES", hijos:[lid]};
                        this.$ = {
                            nombre : "DECVAR",
                            tipo : $$[$0-3],
                            hijos : [lvariables, $$[$0]]
                        };
                    
break;
case 69:

                        this.$ = {
                            nombre : "LOOP",
                            id : $$[$0-3],
                            hijos : [$$[$0-1]]
                        };
                    
break;
case 70:

                        this.$ = {
                            nombre : "CONTAR",
                            hijos : [$$[$0-4], $$[$0-1]]
                        };
                    
break;
case 71:

                        this.$ = {
                            nombre : "HACERX",
                            hijos : [$$[$0-7], $$[$0-3], $$[$0-1]]
                        };
                    
break;
case 72:

                        this.$ = {
                            nombre : "LLAMADO",
                            hijos : [$$[$0-3], $$[$0-1]]
                        };
                    
break;
case 73:

                        $$[$0].hijos.unshift({
                            nombre : "LLAMADO",
                            hijos : [$$[$0-5], $$[$0-3]]
                        });
                        this.$ = $$[$0];
                    
break;
case 74:

                        $$[$0-2].hijos.push($$[$0-1]);
                        this.$ = $$[$0-2];
                    
break;
case 75:
 this.$ = { nombre : "LVALOR", hijos : [$$[$0]] }; 
break;
case 76:
 this.$ = { nombre : "LVALOR", hijos : []}; 
break;
case 77: case 78: case 79: case 80: case 81: case 92: case 93: case 94: case 95: case 96: case 97:
 this.$ = {nombre :$$[$0-1], hijos:[$$[$0-2], $$[$0]]}; 
break;
case 82: case 98:
 this.$ = {nombre :$$[$0-1], hijos:[$$[$0]]}; 
break;
case 84:
 this.$ = {nombre : $$[$0-1], hijos:[$$[$0-2], $$[$0]]}; 
break;
case 86:
 this.$ = '<'; 
break;
case 87:
 this.$ = '>'; 
break;
case 88:
 this.$ = '<='; 
break;
case 89:
 this.$ = '>='; 
break;
case 90:
 this.$ = '=='; 
break;
case 91:
 this.$ = '!='; 
break;
case 99:
 this.$ = {nombre : "numero", valor : $$[$0]}; 
break;
case 100:
 this.$ = {nombre : "cadena", valor : $$[$0]}; 
break;
case 101: case 102:
 this.$ = {nombre : "bool", valor : $$[$0]}; 
break;
case 103:
 this.$ = {nombre : "NULL", valor : $$[$0]}; 
break;
case 104:
 this.$ = {nombre : "NUEVO", id : $$[$0-1]}; 
break;
case 108:

                        $$[$0-2].hijos.push($$[$0]);
                        this.$ = $$[$0-2];
                    
break;
case 109:
 this.$ = {nombre : "LID", hijos:[$$[$0]]}; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,18:$V0,19:$V1,27:9,35:$V2,36:$V3,37:$V4,38:$V5,39:15,40:$V6},{1:[3]},{5:[1,18],6:19,7:4,9:5,10:6,11:7,12:8,18:$V0,19:$V1,27:9,35:$V2,36:$V3,37:$V4,38:$V5,39:15,40:$V6},o($V7,[2,3]),{8:[1,20]},o($V7,[2,5]),{8:[1,21]},o($V7,[2,7]),o($V8,[2,21],{13:22,18:$V9}),{15:$Va,20:25,22:$Vb,28:24},{15:[1,27]},{29:[1,28]},o($Vc,[2,27]),o($Vc,[2,28]),o($Vc,[2,29]),o($Vc,$Vd,{77:$Ve}),o($V8,[2,20]),o($Vf,$Vg),{1:[2,1]},o($V7,[2,2]),o($V7,[2,4]),o($V7,[2,6]),{8:[2,10],14:30,15:[1,32],17:[1,31]},o($Vh,[2,12]),{15:[1,33]},o([15,17,31],[2,22],{22:$Vi}),{23:35,24:$Vj,25:$Vk},{18:[1,37]},{31:[1,38]},{18:[1,39]},{8:[2,8]},{18:[1,40]},{16:41,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:[1,56]},{23:57,24:$Vj,25:$Vk},{24:[1,58]},{24:[2,16],26:[1,59]},{20:60,22:$Vb},{32:[1,61]},o($Vf,[2,108]),o($Vh,[2,11]),{8:[2,9],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{16:67,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VA,[2,83]),o($VA,[2,85],{86:68,87:[1,75],88:[1,76],89:[1,77],90:[1,78],91:[1,79],92:[1,80],93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG}),{18:$Vl,25:$Vm,29:$Vn,39:52,52:53,85:81,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VH,[2,99]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103]),{29:[1,82]},o($VH,[2,105],{77:$Ve}),o($VH,[2,106]),{16:83,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o([8,15,17,18,31,56,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98],$Vg,{29:[1,84]}),{29:[1,85]},{24:[1,86]},o($VI,[2,15]),{25:[1,87]},{21:[1,88],22:$Vi},{7:92,10:93,12:108,18:$Vl,19:$V1,33:89,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{16:117,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{16:118,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{16:119,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{16:120,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{16:121,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VA,[2,82]),{18:$Vl,25:$Vm,29:$Vn,39:52,52:53,85:122,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:$Vl,25:$Vm,29:$Vn,39:52,52:53,85:123,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:$Vl,25:$Vm,29:$Vn,39:52,52:53,85:124,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:$Vl,25:$Vm,29:$Vn,39:52,52:53,85:125,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:$Vl,25:$Vm,29:$Vn,39:52,52:53,85:126,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:$Vl,25:$Vm,29:$Vn,39:52,52:53,85:127,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:$Vl,25:$Vm,29:$Vn,39:52,52:53,85:128,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VU,[2,86]),o($VU,[2,87]),o($VU,[2,88]),o($VU,[2,89]),o($VU,[2,90]),o($VU,[2,91]),o($VV,[2,98],{95:$VD,96:$VE,97:$VF,98:$VG}),{18:[1,129]},{31:[1,130],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($VW,[2,76],{84:43,85:44,39:52,52:53,76:131,16:132,18:$Vl,25:$Vm,29:$Vn,83:$Vo,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu}),o($VW,[2,26],{39:15,30:133,12:134,18:$V0,36:$V3,37:$V4,38:$V5}),o($VI,[2,14]),{24:[2,17]},{12:135,18:$V0,36:$V3,37:$V4,38:$V5,39:15},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,136],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},o($VX,[2,33]),{8:[1,138]},{8:[1,139]},{8:[1,140]},o($VX,[2,37]),o($VX,[2,38]),o($VX,[2,39]),o($VX,[2,40]),o($VX,[2,41]),o($VX,[2,42]),o($VX,[2,43]),o($VX,[2,44]),o($VX,[2,45]),{8:[1,141]},{8:[1,142]},{8:[1,143],18:[1,144]},{8:[1,146],16:145,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:$Vd,56:$VY,77:$Ve},{13:22,18:$V9},{29:[1,148]},{29:[1,149]},{29:[1,150]},{32:[1,151]},{32:[1,152]},{29:[1,153]},{18:[1,154]},{29:[1,155]},o($VZ,[2,77],{79:$Vw,80:$Vx,82:$Vz}),o($VA,[2,78]),o($V_,[2,79],{79:$Vw}),o($VZ,[2,80],{79:$Vw,80:$Vx,82:$Vz}),o($V_,[2,81],{79:$Vw}),o($VA,[2,84],{93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG}),o($VV,[2,92],{95:$VD,96:$VE,97:$VF,98:$VG}),o($VV,[2,93],{95:$VD,96:$VE,97:$VF,98:$VG}),o($V$,[2,94],{97:$VF,98:$VG}),o($V$,[2,95],{97:$VF,98:$VG}),o([8,15,17,31,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,98],[2,96],{97:$VF}),o($V$,[2,97],{97:$VF,98:$VG}),{31:[1,156]},o($VH,[2,107]),{17:[1,158],31:[1,157]},o($VW,[2,75],{78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),{17:[1,160],31:[1,159]},{18:[1,161]},{8:[2,13]},o($V7,[2,31]),o($VX,[2,32]),o($VX,[2,34]),o($VX,[2,35]),o($VX,[2,36]),o($VX,[2,46]),o($VX,[2,47]),o($VX,[2,48]),{8:[1,162]},{8:[1,163],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($VX,[2,51]),o($V01,[2,53],{84:43,85:44,39:52,52:53,16:164,18:$Vl,25:$Vm,29:$Vn,83:$Vo,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu}),{16:165,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{16:166,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{16:167,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{7:92,10:93,12:108,18:$Vl,19:$V1,33:168,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{7:92,10:93,12:108,18:$Vl,19:$V1,33:169,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{18:$V0,36:[1,172],39:173,42:171,72:170},{32:[1,174]},{16:175,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VH,[2,104]),o($VH,[2,72],{77:[1,176]}),{16:177,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{32:[1,178]},{12:179,18:$V0,36:$V3,37:$V4,38:$V5,39:15},o($VW,$Va,{20:25,28:180,22:$Vb}),o($VX,[2,49]),o($VX,[2,50]),o($V01,[2,52],{78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),{31:[1,181],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{17:[1,182],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{31:[1,183],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,184],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,185],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{8:[1,186]},{8:[2,67]},{18:[1,187]},{56:$VY,77:$Ve},{7:92,10:93,12:108,18:$Vl,19:$V1,33:188,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{31:[1,189],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{18:$V0,39:190},o($VW,[2,74],{78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),{7:92,10:93,12:108,18:$Vl,19:$V1,33:191,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{18:[1,192]},o($VW,[2,25]),{58:[1,193]},{16:194,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{32:[1,195]},{67:[1,196],75:[1,197]},{70:[1,198]},{16:199,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{15:[1,200]},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,201],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{32:[1,202]},o($VH,[2,73],{77:$Ve}),{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,203],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},o($VW,$Va,{20:25,28:204,22:$Vb}),{32:[1,205]},{31:[1,206],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{7:92,10:93,12:108,18:$Vl,19:$V1,33:207,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{29:[1,208]},{29:[1,209]},{29:[1,210]},{8:[1,211],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{16:212,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VX,[2,69]),{7:92,10:93,12:108,18:$Vl,19:$V1,33:213,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},o($V7,[2,19]),o($VW,[2,24]),{7:92,10:93,12:108,18:$Vl,19:$V1,33:214,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{32:[1,215]},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,216],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{16:217,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{16:218,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{16:219,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{18:$V0,39:173,42:220},{8:[2,68],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,221],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,222],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{62:223,64:224,65:$V11},o($VX,[2,63]),{31:[1,226],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{17:[1,227],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{31:[1,228],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{31:[1,229]},o($VX,[2,70]),o($VX,[2,56],{59:230,60:[1,231]}),{34:[2,62],63:232,64:233,65:$V11,66:[1,234]},o($V21,[2,59]),{16:235,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VX,[2,64]),{16:236,18:$Vl,25:$Vm,29:$Vn,39:52,52:53,83:$Vo,84:43,85:44,94:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VX,[2,65]),{32:[1,237]},o($VX,[2,54]),{32:[1,238]},{34:[1,239]},o($V21,[2,58]),{15:[1,240]},{15:[1,241],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{31:[1,242],78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{7:92,10:93,12:108,18:$Vl,19:$V1,33:243,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{7:92,10:93,12:108,18:$Vl,19:$V1,33:244,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},o($VX,[2,57]),{7:92,10:93,12:108,18:$Vl,19:$V1,33:245,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{7:92,10:93,12:108,18:$Vl,19:$V1,33:246,36:$V3,37:$V4,38:$V5,39:107,41:90,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},o($VX,[2,71]),{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,247],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[1,248],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},{7:92,10:93,12:108,18:$Vl,19:$V1,34:[2,61],36:$V3,37:$V4,38:$V5,39:107,41:137,42:91,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT},o($V21,[2,60],{42:91,7:92,10:93,43:94,44:95,45:96,46:97,47:98,48:99,49:100,50:101,51:102,52:103,39:107,12:108,41:137,18:$Vl,19:$V1,36:$V3,37:$V4,38:$V5,53:$VJ,54:$VK,55:$VL,57:$VM,61:$VN,67:$VO,68:$VP,69:$VQ,71:$VR,73:$VS,74:$VT}),o($VX,[2,66]),o($VX,[2,55])],
defaultActions: {18:[2,1],30:[2,8],87:[2,17],135:[2,13],171:[2,67]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:/* skip comment */
break;
case 4:/* skip comment */
break;
case 5:return 25
break;
case 6:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 99;
break;
case 7:return 95
break;
case 8:return 96
break;
case 9:return 94
break;
case 10:return 93
break;
case 11:return 98
break;
case 12:return 97
break;
case 13:return 89
break;
case 14:return 90
break;
case 15:return 87
break;
case 16:return 88
break;
case 17:return 91
break;
case 18:return 92
break;
case 19:return 80
break;
case 20:return 78
break;
case 21:return 81
break;
case 22:return 82
break;
case 23:return 79
break;
case 24:return 83
break;
case 25:return 29
break;
case 26:return 31
break;
case 27:return 32
break;
case 28:return 34
break;
case 29:return 22
break;
case 30:return 24
break;
case 31:return 15
break;
case 32:return 8
break;
case 33:return 26
break;
case 34:return 77
break;
case 35:return 17
break;
case 36:return 56
break;
case 37:return 36
break;
case 38:return 37
break;
case 39:return 38
break;
case 40:return 35
break;
case 41:return 19
break;
case 42:return 100
break;
case 43:return 101
break;
case 44:return 21
break;
case 45:return 'element'
break;
case 46:return 102
break;
case 47:return 103
break;
case 48:return 57
break;
case 49:return 58
break;
case 50:return 60
break;
case 51:return 61
break;
case 52:return 65
break;
case 53:return 66
break;
case 54:return 54
break;
case 55:return 53
break;
case 56:return 55
break;
case 57:return 67
break;
case 58:return 68
break;
case 59:return 69
break;
case 60:return 70
break;
case 61:return 71
break;
case 62:return 73
break;
case 63:return 74
break;
case 64:return 75
break;
case 65:return 40
break;
case 66:return 'outStr'
break;
case 67:return 'outNum'
break;
case 68:return 'inStr'
break;
case 69:return 'inNum'
break;
case 70:return 'show'
break;
case 71:return 'getRandom'
break;
case 72:return 'getLength'
break;
case 73:return 'NullPointerException'
break;
case 74:return 'MissingReturnStatement'
break;
case 75:return 'ArithmeticException'
break;
case 76:return 'StackOverFlowException'
break;
case 77:return 'HeapOverFlowException'
break;
case 78:return 'PoolOverFlowException'
break;
case 79:return 'throws'
break;
case 80:return 18
break;
case 81:return 5
break;
case 82:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\r)/,/^(?:\n)/,/^(?:%%[^\n]*\n)/,/^(?:¿¿[^"??"]*\?\?)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&\?)/,/^(?:\|&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:,)/,/^(?:=)/,/^(?:num\b)/,/^(?:str\b)/,/^(?:bool\b)/,/^(?:void\b)/,/^(?:array\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:of\b)/,/^(?:element\b)/,/^(?:NULL\b)/,/^(?:create\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:Principal\b)/,/^(?:outStr\b)/,/^(?:outNum\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:NullPointerException\b)/,/^(?:MissingReturnStatement\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:throws\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}